{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isFinite = require( '@stdlib/assert-is-finite' ).isPrimitive; // eslint-disable-line stdlib/no-redeclare\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.iter] - maximum number of iterations\n* @param {PositiveNumber} [options.tol] - tolerance at which to terminate further evaluation of the continued fraction\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 50\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'tol' ) ) {\n\t\topts.tol = options.tol;\n\t\tif ( !isFinite( options.tol ) || options.tol <= 0.0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive finite number. Option: `%s`.', 'tol', options.tol ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-50;\n\n\n// MAIN //\n\n/**\n* Evaluates the terms of a continued fraction.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Options} [options] - options\n* @param {NonNegativeInteger} [options.iter=1e308] - maximum number of iterations\n* @param {PositiveNumber} [options.tol] - tolerance at which to terminate further evaluation of the continued fraction\n* @throws {TypeError} must provide an iterator\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide validate options\n* @returns {(number|null)} result\n*\n* @example\n* var iterContinuedFractionSeq = require( '@stdlib/math-iter-sequences-continued-fraction' );\n*\n* // Create an iterator for generating continued fraction terms:\n* var it = iterContinuedFractionSeq( 3.245 );\n*\n* // Reconstruct the original value from the terms:\n* var v = iterContinuedFraction( it );\n* // returns ~3.245\n*/\nfunction iterContinuedFraction( iterator ) {\n\tvar delta;\n\tvar opts;\n\tvar err;\n\tvar b0;\n\tvar o;\n\tvar C;\n\tvar D;\n\tvar f;\n\tvar b;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\topts = {\n\t\t'iter': 1e308,\n\t\t'tol': EPS\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, arguments[ 1 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Get the first iterated value...\n\to = iterator.next();\n\tif ( o.done ) {\n\t\treturn null;\n\t}\n\tb0 = o.value;\n\tif ( !isNumber( b0 ) || isnan( b0 ) ) {\n\t\treturn b0;\n\t}\n\t// Initialize parameters of the modified Lentz's algorithm...\n\tf = b0;\n\tif ( f === 0.0 ) {\n\t\tf = TINY;\n\t}\n\tC = f;\n\tD = 0.0;\n\n\t// Evaluate the terms of the continued fraction...\n\ti = 1;\n\twhile ( i < opts.iter ) {\n\t\t// Get the next iterated value...\n\t\to = iterator.next();\n\t\tif ( o.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\n\t\tb = o.value;\n\t\tif ( !isNumber( b ) || isnan( b ) ) {\n\t\t\tf = NaN;\n\t\t\tbreak;\n\t\t}\n\t\t// Use the modified Lentz's algorithm to find the next convergent...\n\t\tD += b;            // b_i + a_i*D_{i-1}, where a_i = 1.0 for all i\n\t\tif ( D === 0.0 ) {\n\t\t\tD = TINY;\n\t\t}\n\t\tC = b + ( 1.0/C ); // b_i + a_i/C_{i-1}, where a_i = 1.0 for all i\n\t\tif ( C === 0.0 ) {\n\t\t\tC = TINY;\n\t\t}\n\t\tD = 1.0 / D;\n\t\tdelta = C * D;\n\t\tf *= delta;\n\n\t\t// Check whether we can terminate computation...\n\t\tif ( abs( delta - 1.0 ) <= opts.tol ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ( i <= 1 ) {\n\t\treturn b0;\n\t}\n\treturn f;\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterContinuedFraction;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the terms of a continued fraction.\n*\n* @module @stdlib/math-iter-utils-continued-fraction\n*\n* @example\n* var iterContinuedFractionSeq = require( '@stdlib/math-iter-sequences-continued-fraction' );\n* var iterContinuedFraction = require( '@stdlib/math-iter-utils-continued-fraction' );\n*\n* var it = iterContinuedFractionSeq( 3.245 );\n*\n* var v = iterContinuedFraction( it );\n* // returns ~3.245\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAa,QAAS,iCAAkC,EACxDC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAS,QAAS,uBAAwB,EAyB9C,SAASC,EAAUC,EAAMC,EAAU,CAClC,OAAMP,EAAeO,CAAQ,EAGxBN,EAAYM,EAAS,MAAO,IAChCD,EAAK,KAAOC,EAAQ,KACf,CAACL,EAAsBK,EAAQ,IAAK,GACjC,IAAI,UAAW,2EAA4E,OAAQA,EAAQ,IAAK,EAGpHN,EAAYM,EAAS,KAAM,IAC/BD,EAAK,IAAMC,EAAQ,IACd,CAACJ,EAAUI,EAAQ,GAAI,GAAKA,EAAQ,KAAO,GACxC,IAAI,UAAWH,EAAQ,8EAA+E,MAAOG,EAAQ,GAAI,CAAE,EAG7H,KAdC,IAAI,UAAWH,EAAQ,qEAAsEG,CAAQ,CAAE,CAehH,CAKAR,EAAO,QAAUM,ICzEjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAiB,QAAS,iCAAkC,EAC5DC,EAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,+BAAgC,EAC/CC,EAAQ,QAAS,iCAAkC,EACnDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAW,IAKXC,EAAO,MA2BX,SAASC,EAAuBC,EAAW,CAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAK,CAACnB,EAAgBS,CAAS,EAC9B,MAAM,IAAI,UAAWJ,EAAQ,2DAA4DI,CAAS,CAAE,EAMrG,GAJAE,EAAO,CACN,KAAQ,MACR,IAAOT,CACR,EACK,UAAU,OAAS,IACvBU,EAAMN,EAAUK,EAAM,UAAW,CAAE,CAAE,EAChCC,GACJ,MAAMA,EAKR,GADAE,EAAIL,EAAS,KAAK,EACbK,EAAE,KACN,OAAO,KAGR,GADAD,EAAKC,EAAE,MACF,CAACV,EAAUS,CAAG,GAAKV,EAAOU,CAAG,EACjC,OAAOA,EAYR,IATAI,EAAIJ,EACCI,IAAM,IACVA,EAAIV,GAELQ,EAAIE,EACJD,EAAI,EAGJG,EAAI,EACIA,EAAIR,EAAK,OAEhBG,EAAIL,EAAS,KAAK,EACb,CAAAK,EAAE,OAHgB,CASvB,GAHAK,GAAK,EAELD,EAAIJ,EAAE,MACD,CAACV,EAAUc,CAAE,GAAKf,EAAOe,CAAE,EAAI,CACnCD,EAAI,IACJ,KACD,CAeA,GAbAD,GAAKE,EACAF,IAAM,IACVA,EAAIT,GAELQ,EAAIG,EAAM,EAAIH,EACTA,IAAM,IACVA,EAAIR,GAELS,EAAI,EAAMA,EACVN,EAAQK,EAAIC,EACZC,GAAKP,EAGAT,EAAKS,EAAQ,CAAI,GAAKC,EAAK,IAC/B,KAEF,CACA,OAAKQ,GAAK,EACFN,EAEDI,CACR,CAKAlB,EAAO,QAAUS,IC1GjB,IAAIY,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "isNonNegativeInteger", "isFinite", "format", "validate", "opts", "options", "require_main", "__commonJSMin", "exports", "module", "isIteratorLike", "abs", "EPS", "isnan", "isNumber", "format", "validate", "TINY", "iterContinuedFraction", "iterator", "delta", "opts", "err", "b0", "o", "C", "D", "f", "b", "i", "main"]
}
